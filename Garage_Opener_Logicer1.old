// Libraries
#include "Arduino.h"
#include "Button.h"

class DistanceSensor {
public:
    DistanceSensor(int trigger, int sensor) : trigger_pin(trigger), sensor_pin(sensor) {
 //       pinMode(trigger_pin, OUTPUT);
 //       pinMode(sensor_pin, INPUT);
    }
    float get_distance() {
        digitalWrite(trigger_pin, LOW);
        delayMicroseconds(2);
        
        digitalWrite(trigger_pin, HIGH);
        delayMicroseconds(10);
        digitalWrite(trigger_pin, LOW);

        unsigned long duration = pulseIn(sensor_pin, HIGH);

        return duration * SOUND_VELOCITY/2;
    }
private:
const float SOUND_VELOCITY = 0.034;

    int trigger_pin;
    int sensor_pin;
};



//Definitions
const int trigPin = 4;
const int echoPin = 5;
const int lightPin = A0;

long duration;
float distanceCm;

#define SOUND_VELOCITY 0.034
#define CM_TO_INCH 0.393701
#define MICROSWITCH_PIN_COM	0
#define LDR_PIN_SIG	A0

Button microSwitch(MICROSWITCH_PIN_COM);
DistanceSensor ultraSensor(trigPin, echoPin);



int LDRValue = 0;
bool car_inside = false;


void setup() {

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(lightPin, INPUT);

  microSwitch.begin();
  Serial.begin(9600);

}


void loop() {


//Light Sensor Read
  LDRValue = analogRead(lightPin);
  Serial.print("Light Value: ");
  Serial.println(LDRValue);

//Distance Sensor Ping

unsigned long distanceCm = ultraSensor.get_distance();


  // Prints the distance on the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);

  delay(1000);

  if (distanceCm == 0.00) {
    Serial.println("Bilen är hemma!");
    }



//microSwitch Function (klistrat från Button.h-exempel)
  if (microSwitch.toggled()) {
      if (microSwitch.read() == Button::PRESSED)
          Serial.println("Garage Open");

      else
          Serial.println("Garage Closed");
    }
}
