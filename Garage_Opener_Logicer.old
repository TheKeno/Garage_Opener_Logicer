// Libraries
#include "Arduino.h"
#include "Button.h"

class DistanceSensor {
public:
	DistanceSensor(int trigger, int sensor) : trigger_pin(trigger), sensor_pin(sensor) {
	}
	float get_distance() {
		digitalWrite(trigger_pin, LOW);
		delayMicroseconds(2);
		
		digitalWrite(trigger_pin, HIGH);
		delayMicroseconds(10);
		digitalWrite(trigger_pin, LOW);

		unsigned long duration = pulseIn(sensor_pin, HIGH);

		return duration * SOUND_VELOCITY/2;
	}

private:
const float SOUND_VELOCITY = 0.034;

	int trigger_pin;
	int sensor_pin;
};

//Definitions
const int trigPin = 4;
const int echoPin = 5;
const int lightPin = A0;

const int LIGHT_LEVEL_THRESHOLD = 400;

long duration;
float distanceCm;

#define SOUND_VELOCITY 0.034
#define CM_TO_INCH 0.393701
#define MICROSWITCH_PIN_COM	0
#define LDR_PIN_SIG	A0

Button microSwitch(MICROSWITCH_PIN_COM);
DistanceSensor ultraSensor(trigPin, echoPin);

bool is_car_inside() {
	int distance = ultraSensor.get_distance();
	if(distance < 300) {
		return true;
	}

	return false;
}

bool is_door_closed() {
	return microSwitch.isReleased();
}


int LDRValue = 0;
bool car_inside = false;



enum STATES {
	STATE_IDLE,
	STATE_WAIT_FOR_SECOND_SIGNAL,
	STATE_OPEN_DOOR,
	STATE_CLOSE_DOOR,
};

struct StateData {
	STATES current_state;
};

void update_idle(StateData* data) {
	if(!is_car_inside())
		return;

	int light_level = analogRead(LightPin);
	if( light_level > LIGHT_LEVEL_THRESHOLD) {
		if(is_door_closed()) {
			state->current_state = STATE_WAIT_FOR_SECOND_SIGNAL;
		} else {
			state->current_state = STATE_CLOSE_DOOR;
		}
	}

	delay(10);
}

void update_wait_for_second_signal(StateData* data) {

	if(!is_car_inside())
		return;

	int light_level = analogRead(LightPin);
	if( light_level > LIGHT_LEVEL_THRESHOLD) {
		if(is_door_closed()) {
			state->current_state = STATE_WAIT_FOR_SECOND_SIGNAL;
		} 
	}
}

void update_open_door(StateData* data) {
}

void update_close_door(StateData* data) {
}

void update(StateData* data) {
	switch(data->current_state) {
		case STATE_IDLE:
			update_idle(data);
			break;

		case STATE_WAIT_FOR_SECOND_SIGNAL:
			update_wait_for_second_signal(data);
			break;

		case OPEN_DOOR:
			update_open_door(data);
			break;

		case CLOSE_DOOR:
			update_close_door(data);
			break;
	}
}


StateData data;

void setup() {
	data.current_state = STATE_IDLE;

	pinMode(trigPin, OUTPUT);
	pinMode(echoPin, INPUT);
	pinMode(lightPin, INPUT);

	microSwitch.begin();
	Serial.begin(9600);
}



void loop() {
	update(&data);
}
